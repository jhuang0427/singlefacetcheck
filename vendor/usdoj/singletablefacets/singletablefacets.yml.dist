# Configuration file for SingleTableFacets.
#
# This should be copied somewhere OUTSIDE of the publicly available files. Ie,
# if the docroot is /var/www/htdocs, this file should be somewhere above that,
# such as /var/www, or adjacent, such as /var/www/libraries/singletablefacets.
#
# You can have any number of these files, named differently, to set up multiple
# instances of SingleTableFacets. Each time you invoke SingleTableFacets, either
# on a web page or on the command line (for refreshing the data) you reference
# this configuration file.
#
# Because this is a YAML file, remember that whitespace is important.

# Database credentials: this is the only required section.
database name: myDatabase
database user: myUser
database password: myPassword
database host: localhost
database table: myTable

# Everything else in this document is optional.

# Indicate the columns that are required to have data in order for a row to
# appear in the search results. For example, if you don't want any rows to show
# up without titles, make your title column a required column here.
required columns:
    - myDatabaseColumn1

# Choose the order that you would like the columns to show in the facet list,
# and indicate the human-readable labels to display above each one.
facet labels:
    myDatabaseColumn1: Filter by something
    myDatabaseColumn2: Filter by something else

# Choose the order that you would like the fields to show in search results,
# and indicate the human-readable labels to display above each one. There is
# one special field called "stf_score". This is not an actual column in your
# database/spreadsheet, but you can include it here to display a "relevance"
# field in your search results.
search result labels:
    myDatabaseColumn2: Something
    myDatabaseColumn1: Something Else
    stf_score: Keyword Relevance

# If you would like the search results grouped by the value of a certain column,
# indicate that column here.
#search result grouping column: myDatabaseColumn1

# Choose the priority (order) and default direction for the sortable columns.
# As with search result labels, there is a special field called "stf_score",
# which you can include to allow users to sort by (keyword) relevance.
# ASC = ascending, DESC = descending
sort directions:
    myDatabaseColumn1: ASC
    myDatabaseColumn2: DESC
    stf_score: DESC

# Twig templating can be used to produce the output of the row data. To do this,
# create a template file in the folder indicated here, named according to the
# column name, with an extension of ".html.twig". For example, with the example
# location below, to create a template for the "Title" column, you would create
# a file at /path/to/templates/Title.html.twig. If no template is created for
# a column, it will be output as its raw value. The template is passed a "row"
# variable which contains all of the columns from the database. As an additional
# shortcut, it gets a "value" variable which is the value of the column being
# output.
template folder for search results: /path/to/templates

# The above setting supports templating for the row data as displayed in the
# search results. The setting below is the same, except that it is applied to
# the data when displaying a single facet item.
# For facet items, there is no "row" variable, and the "value" variable contains
# the raw value of a particular item within the facet. In addition, the template
# gets passed a "count" variable which you can use to display the item count.
# Any columns not specified here will have their facet items displayed as a raw
# value, possible with the item count, depending on the setting you have set for
# "show counts next to facet items" below.
# In most cases you probably will not need to use this, except in cases where
# you need to filter the facet items, such as to capitalize them, eg:
# {{ value|capitalize }} ({{ count }})
template folder for facet items: /path/to/templates

# Twig offers the ability to load custom functions. If you would like to take
# advantage of this, you can create a single file with PHP functions in it,
# and reference that file here. Note that you must also list the functions to
# load in "list of twig functions" below. For more information on Twig
# functions, see http://twig.sensiolabs.org/doc/advanced.html.
#file with twig functions: /path/to/my-twig-function-file.php

# If you indicated a file with Twig functions above, you also need to list the
# names of all the functions you want to use.
#list of twig functions:
#    - my_first_twig_function
#    - my_second_twig_function

# List the columns that contain URLs pointing to files with keywords. The
# keywords in these files will be crawled and indexed. Note, this only works on
# PDF and HTML files.
keywords in files:
    - myDatabaseColumn2

# When crawling remote URLs for keywords, add this prefix to any relative URLs.
# For example, if this is set to: "http://example.com/files/", then a relative
# URL of "mydoc.pdf" will be fetched from "http://example.com/files/mydoc.pdf".
prefix for relative keyword URLs: http://example.com/files/

# List the facet columns that should be collapsed at a certain point. Use 0 to
# collapse all items, or for example, 5 to collapse items in excess of 5.
collapse facet items:
    myDatabaseColumn1: 0
    myDatabaseColumn2: 5

# List the columns that should function as additional values for another facet.
# For example, if you have a Tag and Tag2 column, you could indicate that Tag2
# is just additional values for Tag, and they would both appear together.
# This is the ONLY way to give one item multiple values in a single facet.
columns for additional values:
    # Extra column: Main column
    myDatabaseColumn1: myDatabaseColumn2

# Date granularity can be set for each column. This determines how far the date
# facets will "drill down". The choices are: "year", "month", "day". The default
# is "month", for any columns not specified here.
#date facet granularity:
#    myDatabaseColumn1: year
#    myDatabaseColumn2: month

# List the facet columns that depend on other facets. For example, if you don't
# want "Sub Category" to appear unless "Category" is active, you can set that
# here. This is the only way to imitate a hierarchical setup, and works well
# with "show dependents indented to the right" below.
dependent columns:
    # Child column: Main column
    myDatabaseColumn1: myDatabaseColumn2

# Indent dependents to the right and hide their titles. This gives the effect
# that they are being shown in a hierarchical way.
show dependents indented to the right: true

# Choose a type of display for the search results. The choices are:
# "list", "table". Default is "table".
search result display: table

# List the HTML table columns you would like to give a minimum width (CSS).
# This can be used to cut down on undesirable text wrapping.
minimum column widths:
    myDatabaseColumn1: 75px

# Next to facet items, show the totals in parenthesis.
show counts next to facet items: true

# Choose the text for the keyword search button.
search button text: Search

# Choose the text for the message that shows when there are no results.
no results message: |
    <p>
        Sorry, no results could be found for those keywords.
    </p>

# Display the facet items as checkboxes instead of links.
use checkboxes for facets instead of links: true

# For each page of results, show this many results.
number of items per page: 20

# In the pager, show direct links to this many pages. (Besides the normal
# "Next" and "Previous" buttons.)
number of pager links to show: 5

# Show this blurb in an expandable section beneath the keyword search.
keyword help: |
    <ul>
        <li>Use the checkboxes on the left to refine your search, or enter new keywords to start over.</li>
        <li>Enter multiple keywords to get fewer results, eg: cat dogs</li>
        <li>Use OR to get more results, eg: cats OR dogs</li>
        <li>Put a dash (-) before a keyword to exclude it, eg: dogs -lazy</li>
        <li>Use "" (double-quotes) to match specific phrases, eg: "the quick brown fox"</li>
    </ul>

# Users will click this label to expand the help text above.
keyword help label: "Need help searching?"

# The items within a given facet are normally sorted alphabetically, but setting
# this to true will sort them by their counts, in descending order.
sort facet items by popularity: false

# As mentioned above, the items within a given facet are normally sorted
# alphabetically, as are the search results in a table layout when a particular
# column is click-sorted. This can be a problem when a more "natural" sort is
# needed. For example, computers will place "Foo10" before "Foo2", because of
# the fact that "1" comes before "2". (The computer doesn't care about the extra
# "0" after the "1".) If you would like more natural sorting for particular
# columns, you can indicate those here. However, be aware that the mechanism
# used to make it "natural" is the length of each item. So, "Foo2" would come
# before "Foo10" because of the fact that it's only 4 character long instead of
# 5. So, only turn this on for columns where you are sure that the length of the
# items a suitable criteria for the sorting.
#columns with natural sorting:
#    - myDatabaseColumn1

# Normally when users do a keyword search, the full text (crawled) data is
# included. However if you would like to exclude the full text by default, and
# give the user the option to include it, set this to true.
allow user to exclude full text from keyword search: false

# Out of the box, the system uses MySQL's "Boolean" full-text search system.
# You can read about its supported operators here:
# https://dev.mysql.com/doc/refman/5.5/en/fulltext-boolean.html
# You may find you want different behavior, though, from what MySQL decided on.
# Here a couple of ways to tweak the behavior.

# By default, multiple keywords are treated as an "OR" query. If users want to
# get "AND" behavior, they have to put "+" in front of each word. If you would
# like the default to be "AND", set this value to true. To demonstrate this
# behavior, the following two keyword searches would give identical results:
# - this setting set to false: +dogs +cats
# - this setting set to true:  dogs cats
# As another demonstration, the following two keyword searches would also give
# identical results:
# - this setting set to false: dogs cats
# - this setting set to true:  dogs OR cats
use AND for keyword logic by default: false

# By default the partial word matches will not give results. For example, if
# a row's keywords are all "cats", a search for "cat" will not find results.
# Users can deal with this by putting asterisks at the end of words. For example
# a search for "cat*" would match both "cat" and "cats" (and any other word
# that starts with c-a-t). If you would like all user keywords to be treated
# in this way (automatically getting an asterisk at the end) then set this value
# to true.
automatically put wildcards on keywords entered: false

# If the environment needs to use a proxy, uncomment and fill out this section.
# proxy: 192.168.1.1:8080
# To prevent the use of the proxy for certain URLs, enter partial patterns here.
# proxy exceptions:
#    - .example.com

# If there are any special characters or phrases that need to be altered when
# importing the data from the CSV file, indicate those here. For example, to
# change all occurences of § with &#167; uncomment the lines below.
#text alterations:
#    "§": "&#167;"

# This specifies an alternate location to look for the javascript and CSS files.
# The default is to look in an "assets" folder in same directory as the search
# page.
location of assets: /assets

# Set this to true if you would like to hide search results until at least one
# facet items is active or keywords have been submitted.
require input for search results: false

# If you would like any of the facets to be single-choice only, list them here.
#facets limited to one choice:
#    - myDatabaseColumn1

# If you would like the search results to start with any facet values already
# selected, enter those values here. Probably most useful along with the above
# option for "facets limited to one choice".
#prepopulated facet values:
#    myDatabaseColumn1: 'my value'
